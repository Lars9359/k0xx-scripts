-- k0xx.exe loading screen
print("k0xx.exe loading...")

-- Roblox UI notification
pcall(function()
    game.StarterGui:SetCore("SendNotification", {
        Title = "k0xx.exe";
        Text = "Script successfully injected!";
        Duration = 5;
    })
end)

-- Wait for game and player to fully load
repeat wait() until game:IsLoaded() and game.Players.LocalPlayer

local player = game.Players.LocalPlayer

-- Function to find the moped/bike in character
local function findBike()
    local char = player.Character or player.CharacterAdded:Wait()
    for _, v in pairs(char:GetChildren()) do
        if v:IsA("Model") and v.Name:lower():find("bike") or v.Name:lower():find("moped") then
            return v
        end
    end
    return nil
end

local bike = findBike()
if bike then
    print("Bike/moped found!")
else
    print("No bike or moped detected in character.")
end

-- === GUI SETUP ===

local playerGui = player:WaitForChild("PlayerGui")

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SpeedChanger"
screenGui.Parent = playerGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 320, 0, 140)
frame.Position = UDim2.new(0.5, -160, 0.75, 0)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.Parent = screenGui

-- Title label
local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(1, -20, 0, 30)
titleLabel.Position = UDim2.new(0, 10, 0, 10)
titleLabel.BackgroundTransparency = 1
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.TextSize = 22
titleLabel.Text = "k0xx.exe Speed Changer"
titleLabel.TextXAlignment = Enum.TextXAlignment.Center
titleLabel.Parent = frame

-- Moped Speed Slider Label
local bikeLabel = Instance.new("TextLabel")
bikeLabel.Size = UDim2.new(1, -20, 0, 25)
bikeLabel.Position = UDim2.new(0, 10, 0, 45)
bikeLabel.BackgroundTransparency = 1
bikeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
bikeLabel.Font = Enum.Font.SourceSans
bikeLabel.TextSize = 18
bikeLabel.Text = "Moped Speed: N/A"
bikeLabel.TextXAlignment = Enum.TextXAlignment.Left
bikeLabel.Parent = frame

-- Moped Slider Bar
local bikeSliderBar = Instance.new("Frame")
bikeSliderBar.Size = UDim2.new(1, -20, 0, 20)
bikeSliderBar.Position = UDim2.new(0, 10, 0, 75)
bikeSliderBar.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
bikeSliderBar.Parent = frame

-- Moped Slider Handle
local bikeSliderHandle = Instance.new("Frame")
bikeSliderHandle.Size = UDim2.new(0, 20, 1, 0)
bikeSliderHandle.Position = UDim2.new(0, 0, 0, 0)
bikeSliderHandle.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
bikeSliderHandle.Parent = bikeSliderBar
bikeSliderHandle.ZIndex = 2
bikeSliderHandle.Active = true
bikeSliderHandle.Selectable = true

local draggingBike = false
local minBikeSpeed = 50     -- minimum moped speed
local maxBikeSpeed = 1500   -- max speed to allow (adjust as needed)

local function updateBikeSpeed(x)
    if not bike then return end
    x = math.clamp(x, 0, bikeSliderBar.AbsoluteSize.X)
    local percent = x / bikeSliderBar.AbsoluteSize.X
    local speed = math.floor(minBikeSpeed + (maxBikeSpeed - minBikeSpeed) * percent)
    
    bikeSliderHandle.Position = UDim2.new(percent, 0, 0, 0)
    bikeLabel.Text = "Moped Speed: " .. speed
    
    -- Find the speed value in the bike and update it
    local speedVal = bike:FindFirstChild("Speed") or bike:FindFirstChildWhichIsA("NumberValue")
    if speedVal and speedVal:IsA("NumberValue") then
        speedVal.Value = speed
    end
end

bikeSliderHandle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingBike = true
    end
end)

bikeSliderHandle.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingBike = false
    end
end)

bikeSliderBar.InputChanged:Connect(function(input)
    if draggingBike and input.UserInputType == Enum.UserInputType.MouseMovement then
        local relativeX = input.Position.X - bikeSliderBar.AbsolutePosition.X
        updateBikeSpeed(relativeX)
    end
end)

-- Initialize slider position if bike found
if bike then
    wait(0.1)
    local currentSpeed = 0
    local speedVal = bike:FindFirstChild("Speed") or bike:FindFirstChildWhichIsA("NumberValue")
    if speedVal and speedVal:IsA("NumberValue") then
        currentSpeed = speedVal.Value
    else
        currentSpeed = minBikeSpeed
    end
    local posX = ((currentSpeed - minBikeSpeed) / (maxBikeSpeed - minBikeSpeed)) * bikeSliderBar.AbsoluteSize.X
    updateBikeSpeed(posX)
else
    bikeLabel.Text = "Moped Speed: Not found"
end

-- Optional: you can add walk speed slider here too, if you want
